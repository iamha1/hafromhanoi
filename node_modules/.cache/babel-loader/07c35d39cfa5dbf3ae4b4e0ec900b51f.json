{"ast":null,"code":"import { g as getDefaultExportFromCjs, c as createCommonjsModule, a as commonjsGlobal } from './index-9b07a9d3.js';\nvar sha256 = createCommonjsModule(function (module) {\n  (function (root, factory) {\n    // Hack to make all exports of this module sha256 function object properties.\n    var exports = {};\n    factory(exports);\n    var sha256 = exports[\"default\"];\n\n    for (var k in exports) {\n      sha256[k] = exports[k];\n    }\n\n    {\n      module.exports = sha256;\n    }\n  })(commonjsGlobal, function (exports) {\n    exports.__esModule = true; // SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n    //\n    // Written in 2014-2016 by Dmitry Chestnykh.\n    // Public domain, no warranty.\n    //\n    // Functions (accept and return Uint8Arrays):\n    //\n    //   sha256(message) -> hash\n    //   sha256.hmac(key, message) -> mac\n    //   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n    //\n    //  Classes:\n    //\n    //   new sha256.Hash()\n    //   new sha256.HMAC(key)\n    //\n\n    exports.digestLength = 32;\n    exports.blockSize = 64; // SHA-256 constants\n\n    var K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n\n    function hashBlocks(w, v, p, pos, len) {\n      var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n\n      while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n\n        for (i = 0; i < 16; i++) {\n          j = pos + i * 4;\n          w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n        }\n\n        for (i = 16; i < 64; i++) {\n          u = w[i - 2];\n          t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n          u = w[i - 15];\n          t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n          w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n\n        for (i = 0; i < 64; i++) {\n          t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n          t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n          h = g;\n          g = f;\n          f = e;\n          e = d + t1 | 0;\n          d = c;\n          c = b;\n          b = a;\n          a = t1 + t2 | 0;\n        }\n\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n      }\n\n      return pos;\n    } // Hash implements SHA256 hash algorithm.\n\n\n    var Hash = function () {\n      function Hash() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize; // Note: Int32Array is used instead of Uint32Array for performance reasons.\n\n        this.state = new Int32Array(8); // hash state\n\n        this.temp = new Int32Array(64); // temporary state\n\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n\n        this.bufferLength = 0; // number of bytes in buffer\n\n        this.bytesHashed = 0; // number of total bytes hashed\n\n        this.finished = false; // indicates whether the hash was finalized\n\n        this.reset();\n      } // Resets hash state making it possible\n      // to re-use this instance to hash other data.\n\n\n      Hash.prototype.reset = function () {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n      }; // Cleans internal buffers and re-initializes hash state.\n\n\n      Hash.prototype.clean = function () {\n        for (var i = 0; i < this.buffer.length; i++) {\n          this.buffer[i] = 0;\n        }\n\n        for (var i = 0; i < this.temp.length; i++) {\n          this.temp[i] = 0;\n        }\n\n        this.reset();\n      }; // Updates hash state with the given data.\n      //\n      // Optionally, length of the data can be specified to hash\n      // fewer bytes than data.length.\n      //\n      // Throws error when trying to update already finalized hash:\n      // instance must be reset to use it again.\n\n\n      Hash.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) {\n          dataLength = data.length;\n        }\n\n        if (this.finished) {\n          throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n\n        var dataPos = 0;\n        this.bytesHashed += dataLength;\n\n        if (this.bufferLength > 0) {\n          while (this.bufferLength < 64 && dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n          }\n\n          if (this.bufferLength === 64) {\n            hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n            this.bufferLength = 0;\n          }\n        }\n\n        if (dataLength >= 64) {\n          dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n          dataLength %= 64;\n        }\n\n        while (dataLength > 0) {\n          this.buffer[this.bufferLength++] = data[dataPos++];\n          dataLength--;\n        }\n\n        return this;\n      }; // Finalizes hash state and puts hash into out.\n      //\n      // If hash was already finalized, puts the same value.\n\n\n      Hash.prototype.finish = function (out) {\n        if (!this.finished) {\n          var bytesHashed = this.bytesHashed;\n          var left = this.bufferLength;\n          var bitLenHi = bytesHashed / 0x20000000 | 0;\n          var bitLenLo = bytesHashed << 3;\n          var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n          this.buffer[left] = 0x80;\n\n          for (var i = left + 1; i < padLength - 8; i++) {\n            this.buffer[i] = 0;\n          }\n\n          this.buffer[padLength - 8] = bitLenHi >>> 24 & 0xff;\n          this.buffer[padLength - 7] = bitLenHi >>> 16 & 0xff;\n          this.buffer[padLength - 6] = bitLenHi >>> 8 & 0xff;\n          this.buffer[padLength - 5] = bitLenHi >>> 0 & 0xff;\n          this.buffer[padLength - 4] = bitLenLo >>> 24 & 0xff;\n          this.buffer[padLength - 3] = bitLenLo >>> 16 & 0xff;\n          this.buffer[padLength - 2] = bitLenLo >>> 8 & 0xff;\n          this.buffer[padLength - 1] = bitLenLo >>> 0 & 0xff;\n          hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n          this.finished = true;\n        }\n\n        for (var i = 0; i < 8; i++) {\n          out[i * 4 + 0] = this.state[i] >>> 24 & 0xff;\n          out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;\n          out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;\n          out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;\n        }\n\n        return this;\n      }; // Returns the final hash digest.\n\n\n      Hash.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n      }; // Internal function for use in HMAC for optimization.\n\n\n      Hash.prototype._saveState = function (out) {\n        for (var i = 0; i < this.state.length; i++) {\n          out[i] = this.state[i];\n        }\n      }; // Internal function for use in HMAC for optimization.\n\n\n      Hash.prototype._restoreState = function (from, bytesHashed) {\n        for (var i = 0; i < this.state.length; i++) {\n          this.state[i] = from[i];\n        }\n\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n      };\n\n      return Hash;\n    }();\n\n    exports.Hash = Hash; // HMAC implements HMAC-SHA256 message authentication algorithm.\n\n    var HMAC = function () {\n      function HMAC(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        var pad = new Uint8Array(this.blockSize);\n\n        if (key.length > this.blockSize) {\n          new Hash().update(key).finish(pad).clean();\n        } else {\n          for (var i = 0; i < key.length; i++) {\n            pad[i] = key[i];\n          }\n        }\n\n        for (var i = 0; i < pad.length; i++) {\n          pad[i] ^= 0x36;\n        }\n\n        this.inner.update(pad);\n\n        for (var i = 0; i < pad.length; i++) {\n          pad[i] ^= 0x36 ^ 0x5c;\n        }\n\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n\n        this.inner._saveState(this.istate);\n\n        this.outer._saveState(this.ostate);\n\n        for (var i = 0; i < pad.length; i++) {\n          pad[i] = 0;\n        }\n      } // Returns HMAC state to the state initialized with key\n      // to make it possible to run HMAC over the other data with the same\n      // key without creating a new instance.\n\n\n      HMAC.prototype.reset = function () {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n\n        return this;\n      }; // Cleans HMAC state.\n\n\n      HMAC.prototype.clean = function () {\n        for (var i = 0; i < this.istate.length; i++) {\n          this.ostate[i] = this.istate[i] = 0;\n        }\n\n        this.inner.clean();\n        this.outer.clean();\n      }; // Updates state with provided data.\n\n\n      HMAC.prototype.update = function (data) {\n        this.inner.update(data);\n        return this;\n      }; // Finalizes HMAC and puts the result in out.\n\n\n      HMAC.prototype.finish = function (out) {\n        if (this.outer.finished) {\n          this.outer.finish(out);\n        } else {\n          this.inner.finish(out);\n          this.outer.update(out, this.digestLength).finish(out);\n        }\n\n        return this;\n      }; // Returns message authentication code.\n\n\n      HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n      };\n\n      return HMAC;\n    }();\n\n    exports.HMAC = HMAC; // Returns SHA256 hash of data.\n\n    function hash(data) {\n      var h = new Hash().update(data);\n      var digest = h.digest();\n      h.clean();\n      return digest;\n    }\n\n    exports.hash = hash; // Function hash is both available as module.hash and as default export.\n\n    exports[\"default\"] = hash; // Returns HMAC-SHA256 of data under the key.\n\n    function hmac(key, data) {\n      var h = new HMAC(key).update(data);\n      var digest = h.digest();\n      h.clean();\n      return digest;\n    }\n\n    exports.hmac = hmac; // Fills hkdf buffer like this:\n    // T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\n\n    function fillBuffer(buffer, hmac, info, counter) {\n      // Counter is a byte value: check if it overflowed.\n      var num = counter[0];\n\n      if (num === 0) {\n        throw new Error(\"hkdf: cannot expand more\");\n      } // Prepare HMAC instance for new data with old key.\n\n\n      hmac.reset(); // Hash in previous output if it was generated\n      // (i.e. counter is greater than 1).\n\n      if (num > 1) {\n        hmac.update(buffer);\n      } // Hash in info if it exists.\n\n\n      if (info) {\n        hmac.update(info);\n      } // Hash in the counter.\n\n\n      hmac.update(counter); // Output result to buffer and clean HMAC instance.\n\n      hmac.finish(buffer); // Increment counter inside typed array, this works properly.\n\n      counter[0]++;\n    }\n\n    var hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\n\n    function hkdf(key, salt, info, length) {\n      if (salt === void 0) {\n        salt = hkdfSalt;\n      }\n\n      if (length === void 0) {\n        length = 32;\n      }\n\n      var counter = new Uint8Array([1]); // HKDF-Extract uses salt as HMAC key, and key as data.\n\n      var okm = hmac(salt, key); // Initialize HMAC for expanding with extracted key.\n      // Ensure no collisions with `hmac` function.\n\n      var hmac_ = new HMAC(okm); // Allocate buffer.\n\n      var buffer = new Uint8Array(hmac_.digestLength);\n      var bufpos = buffer.length;\n      var out = new Uint8Array(length);\n\n      for (var i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n          fillBuffer(buffer, hmac_, info, counter);\n          bufpos = 0;\n        }\n\n        out[i] = buffer[bufpos++];\n      }\n\n      hmac_.clean();\n      buffer.fill(0);\n      counter.fill(0);\n      return out;\n    }\n\n    exports.hkdf = hkdf; // Derives a key from password and salt using PBKDF2-HMAC-SHA256\n    // with the given number of iterations.\n    //\n    // The number of bytes returned is equal to dkLen.\n    //\n    // (For better security, avoid dkLen greater than hash length - 32 bytes).\n\n    function pbkdf2(password, salt, iterations, dkLen) {\n      var prf = new HMAC(password);\n      var len = prf.digestLength;\n      var ctr = new Uint8Array(4);\n      var t = new Uint8Array(len);\n      var u = new Uint8Array(len);\n      var dk = new Uint8Array(dkLen);\n\n      for (var i = 0; i * len < dkLen; i++) {\n        var c = i + 1;\n        ctr[0] = c >>> 24 & 0xff;\n        ctr[1] = c >>> 16 & 0xff;\n        ctr[2] = c >>> 8 & 0xff;\n        ctr[3] = c >>> 0 & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n\n        for (var j = 0; j < len; j++) {\n          t[j] = u[j];\n        }\n\n        for (var j = 2; j <= iterations; j++) {\n          prf.reset();\n          prf.update(u).finish(u);\n\n          for (var k = 0; k < len; k++) {\n            t[k] ^= u[k];\n          }\n        }\n\n        for (var j = 0; j < len && i * len + j < dkLen; j++) {\n          dk[i * len + j] = t[j];\n        }\n      }\n\n      for (var i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n      }\n\n      for (var i = 0; i < 4; i++) {\n        ctr[i] = 0;\n      }\n\n      prf.clean();\n      return dk;\n    }\n\n    exports.pbkdf2 = pbkdf2;\n  });\n});\nvar sha256$1 = /*@__PURE__*/getDefaultExportFromCjs(sha256);\nvar sha256$2 = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(null), sha256, {\n  'default': sha256$1\n});\nexport { sha256$2 as s };","map":{"version":3,"sources":["../node_modules/fast-sha256/sha256.js"],"names":["this"],"mappings":"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","sourcesContent":["(function (root, factory) {\n    // Hack to make all exports of this module sha256 function object properties.\n    var exports = {};\n    factory(exports);\n    var sha256 = exports[\"default\"];\n    for (var k in exports) {\n        sha256[k] = exports[k];\n    }\n        \n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = sha256;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() { return sha256; }); \n    } else {\n        root.sha256 = sha256;\n    }\n})(this, function(exports) {\n\"use strict\";\nexports.__esModule = true;\n// SHA-256 (+ HMAC and PBKDF2) for JavaScript.\n//\n// Written in 2014-2016 by Dmitry Chestnykh.\n// Public domain, no warranty.\n//\n// Functions (accept and return Uint8Arrays):\n//\n//   sha256(message) -> hash\n//   sha256.hmac(key, message) -> mac\n//   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk\n//\n//  Classes:\n//\n//   new sha256.Hash()\n//   new sha256.HMAC(key)\n//\nexports.digestLength = 32;\nexports.blockSize = 64;\n// SHA-256 constants\nvar K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\nfunction hashBlocks(w, v, p, pos, len) {\n    var a, b, c, d, e, f, g, h, u, i, j, t1, t2;\n    while (len >= 64) {\n        a = v[0];\n        b = v[1];\n        c = v[2];\n        d = v[3];\n        e = v[4];\n        f = v[5];\n        g = v[6];\n        h = v[7];\n        for (i = 0; i < 16; i++) {\n            j = pos + i * 4;\n            w[i] = (((p[j] & 0xff) << 24) | ((p[j + 1] & 0xff) << 16) |\n                ((p[j + 2] & 0xff) << 8) | (p[j + 3] & 0xff));\n        }\n        for (i = 16; i < 64; i++) {\n            u = w[i - 2];\n            t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n            u = w[i - 15];\n            t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n        for (i = 0; i < 64; i++) {\n            t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n            t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n// Hash implements SHA256 hash algorithm.\nvar Hash = /** @class */ (function () {\n    function Hash() {\n        this.digestLength = exports.digestLength;\n        this.blockSize = exports.blockSize;\n        // Note: Int32Array is used instead of Uint32Array for performance reasons.\n        this.state = new Int32Array(8); // hash state\n        this.temp = new Int32Array(64); // temporary state\n        this.buffer = new Uint8Array(128); // buffer for data to hash\n        this.bufferLength = 0; // number of bytes in buffer\n        this.bytesHashed = 0; // number of total bytes hashed\n        this.finished = false; // indicates whether the hash was finalized\n        this.reset();\n    }\n    // Resets hash state making it possible\n    // to re-use this instance to hash other data.\n    Hash.prototype.reset = function () {\n        this.state[0] = 0x6a09e667;\n        this.state[1] = 0xbb67ae85;\n        this.state[2] = 0x3c6ef372;\n        this.state[3] = 0xa54ff53a;\n        this.state[4] = 0x510e527f;\n        this.state[5] = 0x9b05688c;\n        this.state[6] = 0x1f83d9ab;\n        this.state[7] = 0x5be0cd19;\n        this.bufferLength = 0;\n        this.bytesHashed = 0;\n        this.finished = false;\n        return this;\n    };\n    // Cleans internal buffers and re-initializes hash state.\n    Hash.prototype.clean = function () {\n        for (var i = 0; i < this.buffer.length; i++) {\n            this.buffer[i] = 0;\n        }\n        for (var i = 0; i < this.temp.length; i++) {\n            this.temp[i] = 0;\n        }\n        this.reset();\n    };\n    // Updates hash state with the given data.\n    //\n    // Optionally, length of the data can be specified to hash\n    // fewer bytes than data.length.\n    //\n    // Throws error when trying to update already finalized hash:\n    // instance must be reset to use it again.\n    Hash.prototype.update = function (data, dataLength) {\n        if (dataLength === void 0) { dataLength = data.length; }\n        if (this.finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        var dataPos = 0;\n        this.bytesHashed += dataLength;\n        if (this.bufferLength > 0) {\n            while (this.bufferLength < 64 && dataLength > 0) {\n                this.buffer[this.bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this.bufferLength === 64) {\n                hashBlocks(this.temp, this.state, this.buffer, 0, 64);\n                this.bufferLength = 0;\n            }\n        }\n        if (dataLength >= 64) {\n            dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength);\n            dataLength %= 64;\n        }\n        while (dataLength > 0) {\n            this.buffer[this.bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    };\n    // Finalizes hash state and puts hash into out.\n    //\n    // If hash was already finalized, puts the same value.\n    Hash.prototype.finish = function (out) {\n        if (!this.finished) {\n            var bytesHashed = this.bytesHashed;\n            var left = this.bufferLength;\n            var bitLenHi = (bytesHashed / 0x20000000) | 0;\n            var bitLenLo = bytesHashed << 3;\n            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n            this.buffer[left] = 0x80;\n            for (var i = left + 1; i < padLength - 8; i++) {\n                this.buffer[i] = 0;\n            }\n            this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff;\n            this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff;\n            this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff;\n            this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff;\n            this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff;\n            this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff;\n            this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff;\n            this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff;\n            hashBlocks(this.temp, this.state, this.buffer, 0, padLength);\n            this.finished = true;\n        }\n        for (var i = 0; i < 8; i++) {\n            out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff;\n            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n        }\n        return this;\n    };\n    // Returns the final hash digest.\n    Hash.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._saveState = function (out) {\n        for (var i = 0; i < this.state.length; i++) {\n            out[i] = this.state[i];\n        }\n    };\n    // Internal function for use in HMAC for optimization.\n    Hash.prototype._restoreState = function (from, bytesHashed) {\n        for (var i = 0; i < this.state.length; i++) {\n            this.state[i] = from[i];\n        }\n        this.bytesHashed = bytesHashed;\n        this.finished = false;\n        this.bufferLength = 0;\n    };\n    return Hash;\n}());\nexports.Hash = Hash;\n// HMAC implements HMAC-SHA256 message authentication algorithm.\nvar HMAC = /** @class */ (function () {\n    function HMAC(key) {\n        this.inner = new Hash();\n        this.outer = new Hash();\n        this.blockSize = this.inner.blockSize;\n        this.digestLength = this.inner.digestLength;\n        var pad = new Uint8Array(this.blockSize);\n        if (key.length > this.blockSize) {\n            (new Hash()).update(key).finish(pad).clean();\n        }\n        else {\n            for (var i = 0; i < key.length; i++) {\n                pad[i] = key[i];\n            }\n        }\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36;\n        }\n        this.inner.update(pad);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] ^= 0x36 ^ 0x5c;\n        }\n        this.outer.update(pad);\n        this.istate = new Uint32Array(8);\n        this.ostate = new Uint32Array(8);\n        this.inner._saveState(this.istate);\n        this.outer._saveState(this.ostate);\n        for (var i = 0; i < pad.length; i++) {\n            pad[i] = 0;\n        }\n    }\n    // Returns HMAC state to the state initialized with key\n    // to make it possible to run HMAC over the other data with the same\n    // key without creating a new instance.\n    HMAC.prototype.reset = function () {\n        this.inner._restoreState(this.istate, this.inner.blockSize);\n        this.outer._restoreState(this.ostate, this.outer.blockSize);\n        return this;\n    };\n    // Cleans HMAC state.\n    HMAC.prototype.clean = function () {\n        for (var i = 0; i < this.istate.length; i++) {\n            this.ostate[i] = this.istate[i] = 0;\n        }\n        this.inner.clean();\n        this.outer.clean();\n    };\n    // Updates state with provided data.\n    HMAC.prototype.update = function (data) {\n        this.inner.update(data);\n        return this;\n    };\n    // Finalizes HMAC and puts the result in out.\n    HMAC.prototype.finish = function (out) {\n        if (this.outer.finished) {\n            this.outer.finish(out);\n        }\n        else {\n            this.inner.finish(out);\n            this.outer.update(out, this.digestLength).finish(out);\n        }\n        return this;\n    };\n    // Returns message authentication code.\n    HMAC.prototype.digest = function () {\n        var out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    };\n    return HMAC;\n}());\nexports.HMAC = HMAC;\n// Returns SHA256 hash of data.\nfunction hash(data) {\n    var h = (new Hash()).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hash = hash;\n// Function hash is both available as module.hash and as default export.\nexports[\"default\"] = hash;\n// Returns HMAC-SHA256 of data under the key.\nfunction hmac(key, data) {\n    var h = (new HMAC(key)).update(data);\n    var digest = h.digest();\n    h.clean();\n    return digest;\n}\nexports.hmac = hmac;\n// Fills hkdf buffer like this:\n// T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)\nfunction fillBuffer(buffer, hmac, info, counter) {\n    // Counter is a byte value: check if it overflowed.\n    var num = counter[0];\n    if (num === 0) {\n        throw new Error(\"hkdf: cannot expand more\");\n    }\n    // Prepare HMAC instance for new data with old key.\n    hmac.reset();\n    // Hash in previous output if it was generated\n    // (i.e. counter is greater than 1).\n    if (num > 1) {\n        hmac.update(buffer);\n    }\n    // Hash in info if it exists.\n    if (info) {\n        hmac.update(info);\n    }\n    // Hash in the counter.\n    hmac.update(counter);\n    // Output result to buffer and clean HMAC instance.\n    hmac.finish(buffer);\n    // Increment counter inside typed array, this works properly.\n    counter[0]++;\n}\nvar hkdfSalt = new Uint8Array(exports.digestLength); // Filled with zeroes.\nfunction hkdf(key, salt, info, length) {\n    if (salt === void 0) { salt = hkdfSalt; }\n    if (length === void 0) { length = 32; }\n    var counter = new Uint8Array([1]);\n    // HKDF-Extract uses salt as HMAC key, and key as data.\n    var okm = hmac(salt, key);\n    // Initialize HMAC for expanding with extracted key.\n    // Ensure no collisions with `hmac` function.\n    var hmac_ = new HMAC(okm);\n    // Allocate buffer.\n    var buffer = new Uint8Array(hmac_.digestLength);\n    var bufpos = buffer.length;\n    var out = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n        if (bufpos === buffer.length) {\n            fillBuffer(buffer, hmac_, info, counter);\n            bufpos = 0;\n        }\n        out[i] = buffer[bufpos++];\n    }\n    hmac_.clean();\n    buffer.fill(0);\n    counter.fill(0);\n    return out;\n}\nexports.hkdf = hkdf;\n// Derives a key from password and salt using PBKDF2-HMAC-SHA256\n// with the given number of iterations.\n//\n// The number of bytes returned is equal to dkLen.\n//\n// (For better security, avoid dkLen greater than hash length - 32 bytes).\nfunction pbkdf2(password, salt, iterations, dkLen) {\n    var prf = new HMAC(password);\n    var len = prf.digestLength;\n    var ctr = new Uint8Array(4);\n    var t = new Uint8Array(len);\n    var u = new Uint8Array(len);\n    var dk = new Uint8Array(dkLen);\n    for (var i = 0; i * len < dkLen; i++) {\n        var c = i + 1;\n        ctr[0] = (c >>> 24) & 0xff;\n        ctr[1] = (c >>> 16) & 0xff;\n        ctr[2] = (c >>> 8) & 0xff;\n        ctr[3] = (c >>> 0) & 0xff;\n        prf.reset();\n        prf.update(salt);\n        prf.update(ctr);\n        prf.finish(u);\n        for (var j = 0; j < len; j++) {\n            t[j] = u[j];\n        }\n        for (var j = 2; j <= iterations; j++) {\n            prf.reset();\n            prf.update(u).finish(u);\n            for (var k = 0; k < len; k++) {\n                t[k] ^= u[k];\n            }\n        }\n        for (var j = 0; j < len && i * len + j < dkLen; j++) {\n            dk[i * len + j] = t[j];\n        }\n    }\n    for (var i = 0; i < len; i++) {\n        t[i] = u[i] = 0;\n    }\n    for (var i = 0; i < 4; i++) {\n        ctr[i] = 0;\n    }\n    prf.clean();\n    return dk;\n}\nexports.pbkdf2 = pbkdf2;\n});\n"]},"metadata":{},"sourceType":"module"}