{"ast":null,"code":"import React__default, { Fragment } from 'react';\nimport { L as Label, u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, I as Input, P as PasswordInput, a as SubmitButton, b as SecondaryButton } from './index.esm-587f4988.js';\nimport { E as ErrorText } from './ErrorText-1a5ff552.js';\nimport { _ as _extends, u as useEasybase } from './index-9b07a9d3.js';\nimport { q as qe, t as toast } from './Auth-016a6bca.js';\nconst SelectContainer = qe.div({\n  position: 'relative',\n  display: 'inline',\n  width: '100%',\n  maxWidth: '100%',\n  cursor: 'pointer',\n  '&:after': {\n    content: \"''\",\n    width: 0,\n    height: 0,\n    position: 'absolute',\n    pointerEvents: 'none',\n    top: '.3em',\n    right: '.75em',\n    borderTop: '8px solid black',\n    opacity: 0.5,\n    borderLeft: '5px solid transparent',\n    borderRight: '5px solid transparent'\n  }\n});\nconst Select = qe.select({\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  appearance: 'none',\n  padding: '1em 2em 1em 1em',\n  border: 'none',\n  width: '100%',\n  fontFamily: 'inherit',\n  fontSize: 'inherit',\n  cursor: 'pointer',\n  outline: 'none',\n  '&::-ms-expand': {\n    display: 'none'\n  }\n});\nconst SelectOption = qe.option(props => _extends({\n  width: '100%'\n}, props.theme.selectOption ? _extends({}, props.theme.selectOption) : {}));\n\nfunction Select$1(props) {\n  return React__default.createElement(SelectContainer, null, React__default.createElement(Select, Object.assign({}, props, props.register(), {\n    defaultValue: \"\"\n  }), React__default.createElement(SelectOption, {\n    key: \"empty-option\",\n    value: \"\",\n    disabled: true,\n    hidden: true,\n    style: {\n      display: 'none'\n    }\n  }), props.options.map(e => React__default.createElement(SelectOption, {\n    key: \"option\" + e\n  }, e))));\n}\n\nconst GenderSelect = qe(Select$1)(props => _extends({\n  boxSizing: \"border-box\"\n}, props.theme.genderSelect ? _extends({}, props.theme.genderSelect) : {}));\nconst Root = qe.div({\n  position: \"relative\"\n});\nconst GenderLabel = qe(Label)(props => _extends({}, props.theme.genderSelectLabel ? _extends({}, props.theme.genderSelectLabel) : {}));\n\nfunction GenderSelect$1(props) {\n  return React__default.createElement(Root, null, React__default.createElement(GenderLabel, {\n    htmlFor: \"select-gender\"\n  }, \"Gender *\"), React__default.createElement(GenderSelect, Object.assign({\n    id: \"select-gender\"\n  }, props, {\n    options: [\"Male\", \"Female\", \"Prefer not to say\"]\n  })));\n}\n\nfunction SignUp({\n  setCurrentPage,\n  dictionary,\n  signUpFields\n}) {\n  var _errors$firstName, _errors$lastName, _errors$fullName, _errors$dateOfBirth, _errors$gender, _errors$phoneNumber, _errors$password, _errors$passwordConfi;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    },\n    reset\n  } = useForm();\n  const {\n    signUp,\n    signIn\n  } = useEasybase();\n\n  const onSubmit = async formData => {\n    if (!formData.email || !formData.password || !formData.passwordConfirm) {\n      return;\n    }\n\n    if (formData.password !== formData.passwordConfirm) {\n      toast.error(dictionary.errorPasswordsDoNotMatch);\n      reset();\n      return;\n    }\n\n    const signUpAttrs = {\n      createdAt: new Date().toISOString()\n    };\n\n    for (const currField of [\"firstName\", \"lastName\", \"fullName\", \"dateOfBirth\", \"gender\", \"phoneNumber\"]) {\n      if (signUpFields[currField]) {\n        if (formData[currField]) {\n          signUpAttrs[currField] = \"\" + formData[currField];\n        } else {\n          toast.error(\"Missing sign up field value\");\n          return;\n        }\n      }\n    }\n\n    const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);\n\n    if (signUpRes.success) {\n      setCurrentPage(\"SignIn\");\n      await signIn(formData.email, formData.password);\n    } else {\n      if (signUpRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      } else if (signUpRes.errorCode === \"BadPasswordLength\") {\n        toast.error(dictionary.errorPasswordTooShort);\n      } else if (signUpRes.errorCode === \"UserExists\") {\n        reset();\n        toast.error(dictionary.errorUserAlreadyExists);\n      }\n    }\n  };\n\n  const passwordReqs = {\n    minLength: {\n      value: 8,\n      message: \"Password must be at least 8 characters long\"\n    },\n    maxLength: {\n      value: 100,\n      message: \"Password too long\"\n    },\n    pattern: {\n      value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n      message: \"Must contain a digit and uppercase and lowercase letters\"\n    }\n  };\n  return React__default.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, React__default.createElement(HeaderText, null, dictionary.signUpHeader), React__default.createElement(Spacer, {\n    size: \"medium\"\n  }), React__default.createElement(EmailInput, {\n    register: () => register(\"email\"),\n    label: dictionary.newEmailLabel,\n    disabled: isSubmitting\n  }), signUpFields.firstName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(Input, {\n    register: () => register(\"firstName\", typeof signUpFields.firstName === \"boolean\" ? {} : signUpFields.firstName),\n    label: dictionary.newFirstNameLabel || \"\",\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$firstName = errors.firstName) == null ? void 0 : _errors$firstName.message\n  })), signUpFields.lastName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(Input, {\n    register: () => register(\"lastName\", typeof signUpFields.lastName === \"boolean\" ? {} : signUpFields.lastName),\n    label: dictionary.newLastNameLabel || \"\",\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$lastName = errors.lastName) == null ? void 0 : _errors$lastName.message\n  })), signUpFields.fullName && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(Input, {\n    register: () => register(\"fullName\", typeof signUpFields.fullName === \"boolean\" ? {} : signUpFields.fullName),\n    label: dictionary.newFullNameLabel || \"\",\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$fullName = errors.fullName) == null ? void 0 : _errors$fullName.message\n  })), signUpFields.dateOfBirth && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(Input, {\n    type: \"date\",\n    register: () => register(\"dateOfBirth\", typeof signUpFields.dateOfBirth === \"boolean\" ? {} : signUpFields.dateOfBirth),\n    label: dictionary.newDateOfBirthLabel || \"\",\n    disabled: isSubmitting,\n    style: {\n      overflow: \"hidden\"\n    }\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$dateOfBirth = errors.dateOfBirth) == null ? void 0 : _errors$dateOfBirth.message\n  })), signUpFields.gender && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(GenderSelect$1, {\n    register: () => register(\"gender\", typeof signUpFields.gender === \"boolean\" ? {} : signUpFields.gender),\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$gender = errors.gender) == null ? void 0 : _errors$gender.message\n  })), signUpFields.phoneNumber && React__default.createElement(Fragment, null, React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(Input, {\n    type: \"tel\",\n    label: dictionary.newPhoneNumberLabel || \"\",\n    register: () => register(\"phoneNumber\", typeof signUpFields.phoneNumber === \"boolean\" ? {} : signUpFields.phoneNumber),\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$phoneNumber = errors.phoneNumber) == null ? void 0 : _errors$phoneNumber.message\n  })), React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(PasswordInput, {\n    register: () => register(\"password\", passwordReqs),\n    label: dictionary.newPasswordLabel,\n    autoComplete: \"new-password\",\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$password = errors.password) == null ? void 0 : _errors$password.message\n  }), React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(PasswordInput, {\n    register: () => register(\"passwordConfirm\", passwordReqs),\n    label: dictionary.confirmNewPasswordLabel,\n    autoComplete: \"new-password\",\n    disabled: isSubmitting\n  }), React__default.createElement(ErrorText, {\n    value: (_errors$passwordConfi = errors.passwordConfirm) == null ? void 0 : _errors$passwordConfi.message\n  }), React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(SubmitButton, {\n    disabled: isSubmitting\n  }, dictionary.signUpSubmitButton), React__default.createElement(SecondaryButton, {\n    onClick: _ => setCurrentPage(\"SignIn\"),\n    disabled: isSubmitting\n  }, dictionary.backToSignIn));\n}\n\nexport default SignUp;","map":{"version":3,"sources":["../src/ui/Auth/components/internal/Select.tsx","../src/ui/Auth/components/GenderSelect.tsx","../src/ui/Auth/pages/SignUp.tsx"],"names":["SelectContainer","position","display","width","maxWidth","cursor","content","height","pointerEvents","top","right","borderTop","opacity","borderLeft","borderRight","Select","WebkitAppearance","MozAppearance","appearance","padding","border","fontFamily","fontSize","outline","SelectOption","styled","props","React","defaultValue","key","value","disabled","hidden","style","e","GenderSelect","boxSizing","Root","GenderLabel","htmlFor","id","options","signUpFields","formState","isSubmitting","reset","useForm","signIn","useEasybase","onSubmit","formData","toast","dictionary","signUpAttrs","createdAt","signUpRes","signUp","setCurrentPage","passwordReqs","minLength","message","maxLength","pattern","handleSubmit","size","register","label","newEmailLabel","errors","type","overflow","newPasswordLabel","autoComplete","confirmNewPasswordLabel","onClick","_"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\n\nconst SelectContainer = styled.div({\n    position: 'relative',\n    display: 'inline',\n    width: '100%',\n    maxWidth: '100%',\n    cursor: 'pointer',\n    '&:after': {\n        content: \"''\",\n        width: 0,\n        height: 0,\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '.3em',\n        right: '.75em',\n        borderTop: '8px solid black',\n        opacity: 0.5,\n        borderLeft: '5px solid transparent',\n        borderRight: '5px solid transparent'\n    }\n})\n\nconst Select = styled.select({\n    WebkitAppearance: 'none',\n    MozAppearance: 'none',\n    appearance: 'none',\n    padding: '1em 2em 1em 1em',\n    border: 'none',\n    width: '100%',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    cursor: 'pointer',\n    outline: 'none',\n    '&::-ms-expand': {\n        display: 'none'\n    }\n})\n\nconst SelectOption = styled.option(props => ({\n    width: '100%',\n    ...(props.theme.selectOption ? { ...props.theme.selectOption } : {})\n}))\n\ninterface ISelect extends React.SelectHTMLAttributes<HTMLSelectElement> {\n    options: string[];\n    id: string;\n    register(): UseFormRegisterReturn;\n}\n\nexport default function (props: ISelect) {\n    return (\n        <SelectContainer>\n            <Select {...props} {...props.register()} defaultValue=\"\">\n                <SelectOption key=\"empty-option\" value=\"\" disabled hidden style={{ display: 'none' }} />\n                {props.options.map(e => <SelectOption key={\"option\" + e}>{e}</SelectOption>)}\n            </Select>\n        </SelectContainer>\n    )\n}\n","import React from 'react';\nimport { UseFormRegisterReturn } from 'react-hook-form';\nimport styled from 'styled-components';\nimport Label from './internal/Label';\nimport Select from './internal/Select';\n\nconst GenderSelect = styled(Select)(props => ({\n    boxSizing: \"border-box\",\n    ...(props.theme.genderSelect ? { ...props.theme.genderSelect } : {})\n}))\n\nconst Root = styled.div({\n    position: \"relative\"\n})\n\ninterface ISelect extends React.SelectHTMLAttributes<HTMLSelectElement> {\n    register(): UseFormRegisterReturn;\n}\n\nconst GenderLabel = styled(Label)(props => ({\n    ...(props.theme.genderSelectLabel ? { ...props.theme.genderSelectLabel } : {})\n}))\n\nexport default function (props: ISelect) {\n    return (\n        <Root>\n            <GenderLabel htmlFor=\"select-gender\">Gender *</GenderLabel>\n            <GenderSelect id=\"select-gender\" {...props} options={[\"Male\", \"Female\", \"Prefer not to say\"]} />\n        </Root>\n    )\n}\n","import React, { Fragment } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport PasswordInput from '../components/PasswordInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport ErrorText from '../components/ErrorText';\nimport GenderSelect from '../components/GenderSelect';\nimport Input from '../components/internal/Input';\nimport { useForm } from 'react-hook-form';\nimport { IPage, ISignUpFields } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport useEasybase from '../../../useEasybase';\n\ninterface ISignUpPage extends IPage {\n    signUpFields: ISignUpFields\n}\n\nexport default function ({ setCurrentPage, dictionary, signUpFields }: ISignUpPage) {\n    const { register, handleSubmit, formState: { errors, isSubmitting }, reset } = useForm();\n    const { signUp, signIn } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email || !formData.password || !formData.passwordConfirm) {\n            return;\n        }\n        if (formData.password !== formData.passwordConfirm) {\n            toast.error(dictionary.errorPasswordsDoNotMatch!);\n            reset();\n            return;\n        }\n\n        const signUpAttrs = { createdAt: new Date().toISOString() };\n        for (const currField of [\"firstName\", \"lastName\", \"fullName\", \"dateOfBirth\", \"gender\", \"phoneNumber\"]) {\n            if (signUpFields[currField]) {\n                if (formData[currField]) {\n                    signUpAttrs[currField] = \"\" + formData[currField];\n                } else {\n                    toast.error(\"Missing sign up field value\");\n                    return;\n                }\n            }\n        }\n\n        const signUpRes = await signUp(formData.email, formData.password, signUpAttrs);\n        if (signUpRes.success) {\n            setCurrentPage(\"SignIn\")\n            await signIn(formData.email, formData.password)\n        } else {\n            if (signUpRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (signUpRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (signUpRes.errorCode === \"UserExists\") {\n                reset();\n                toast.error(dictionary.errorUserAlreadyExists!);\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <HeaderText>{dictionary.signUpHeader}</HeaderText>\n            <Spacer size=\"medium\" />\n\n            <EmailInput\n                register={() => register(\"email\")}\n                label={dictionary.newEmailLabel}\n                disabled={isSubmitting}\n            />\n\n            { signUpFields.firstName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"firstName\", typeof signUpFields.firstName === \"boolean\" ? {} : signUpFields.firstName)}\n                        label={dictionary.newFirstNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.firstName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.lastName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"lastName\", typeof signUpFields.lastName === \"boolean\" ? {} : signUpFields.lastName)}\n                        label={dictionary.newLastNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.lastName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.fullName &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        register={() => register(\"fullName\", typeof signUpFields.fullName === \"boolean\" ? {} : signUpFields.fullName)}\n                        label={dictionary.newFullNameLabel || \"\"}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.fullName?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.dateOfBirth &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        type=\"date\"\n                        register={() => register(\"dateOfBirth\", typeof signUpFields.dateOfBirth === \"boolean\" ? {} : signUpFields.dateOfBirth)}\n                        label={dictionary.newDateOfBirthLabel || \"\"}\n                        disabled={isSubmitting}\n                        style={{ overflow: \"hidden\" }}\n                    />\n                    <ErrorText value={errors.dateOfBirth?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.gender &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <GenderSelect\n                        register={() => register(\"gender\", typeof signUpFields.gender === \"boolean\" ? {} : signUpFields.gender)}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.gender?.message} />\n                </Fragment>\n            }\n\n            { signUpFields.phoneNumber &&\n                <Fragment>\n                    <Spacer size=\"xlarge\" />\n                    <Input\n                        type=\"tel\"\n                        label={dictionary.newPhoneNumberLabel || \"\"}\n                        register={() => register(\"phoneNumber\", typeof signUpFields.phoneNumber === \"boolean\" ? {} : signUpFields.phoneNumber)}\n                        disabled={isSubmitting}\n                    />\n                    <ErrorText value={errors.phoneNumber?.message} />\n                </Fragment>\n            }\n\n            <Spacer size=\"xlarge\" />\n            <PasswordInput\n                register={() => register(\"password\", passwordReqs)}\n                label={dictionary.newPasswordLabel}\n                autoComplete=\"new-password\"\n                disabled={isSubmitting}\n            />\n            <ErrorText value={errors.password?.message} />\n            <Spacer size=\"xlarge\" />\n            <PasswordInput\n                register={() => register(\"passwordConfirm\", passwordReqs)}\n                label={dictionary.confirmNewPasswordLabel}\n                autoComplete=\"new-password\"\n                disabled={isSubmitting}\n            />\n            <ErrorText value={errors.passwordConfirm?.message} />\n\n            <Spacer size=\"xlarge\" />\n            <SubmitButton disabled={isSubmitting}>{dictionary.signUpSubmitButton}</SubmitButton>\n            <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}