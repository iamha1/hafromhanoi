{"ast":null,"code":"import React__default, { useState } from 'react';\nimport { u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, a as SubmitButton, b as SecondaryButton, I as Input, P as PasswordInput } from './index.esm-587f4988.js';\nimport { _ as _extends, u as useEasybase } from './index-9b07a9d3.js';\nimport { q as qe, t as toast } from './Auth-016a6bca.js';\nimport { E as ErrorText } from './ErrorText-1a5ff552.js';\nconst SecondaryText = qe.h2(props => _extends({\n  fontFamily: \"inherit\",\n  fontSize: 15,\n  fontWeight: 300,\n  letterSpacing: -.2,\n  lineHeight: '20px',\n  whiteSpace: 'normal'\n}, props.theme.secondaryText ? _extends({}, props.theme.secondaryText) : {}));\n\nfunction SecondaryText$1(props) {\n  return React__default.createElement(SecondaryText, Object.assign({}, props));\n}\n\nfunction ForgotPassword({\n  setCurrentPage,\n  dictionary,\n  emailTemplate\n}) {\n  const [onConfirm, setOnConfirm] = useState(false);\n  const [forgottenUsername, setForgottenUsername] = useState();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = useForm();\n  const {\n    forgotPassword,\n    forgotPasswordConfirm\n  } = useEasybase();\n\n  const onSubmit = async formData => {\n    if (!formData.email) {\n      return;\n    }\n\n    const forgotRes = await forgotPassword(formData.email, emailTemplate);\n\n    if (forgotRes.success) {\n      setForgottenUsername(formData.email);\n      setOnConfirm(true);\n      toast.success('Check your email for a verification code');\n    } else {\n      if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n        toast.error(dictionary.errorRequestLimitExceeded);\n      } else if (forgotRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      } else if (forgotRes.errorCode === \"NoUserExists\") {\n        reset();\n        toast.error(dictionary.errorNoAccountFound);\n      } else {\n        reset();\n        toast.error('Bad request');\n      }\n    }\n  };\n\n  const onConfirmSubmit = async formData => {\n    if (!formData.code || !formData.newPassword || !forgottenUsername) {\n      return;\n    }\n\n    const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword);\n\n    if (forgotConfirmRes.success) {\n      setOnConfirm(false);\n      setForgottenUsername(\"\");\n      setCurrentPage('SignIn');\n      toast.success('Password successfully changed');\n    } else {\n      if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n        toast.error(dictionary.errorPasswordTooShort);\n      } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n        reset();\n        toast.error(dictionary.errorNoAccountFound);\n      } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n        toast.error(dictionary.errorWrongVerificationCode);\n      } else {\n        toast.error('Bad request');\n      }\n    }\n  };\n\n  const passwordReqs = {\n    minLength: {\n      value: 8,\n      message: \"Password must be at least 8 characters long\"\n    },\n    maxLength: {\n      value: 100,\n      message: \"Password too long\"\n    },\n    pattern: {\n      value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n      message: \"Must contain a digit and uppercase and lowercase letters\"\n    }\n  };\n  const codeReqs = {\n    minLength: {\n      value: 8,\n      message: \"Incorrect code length\"\n    }\n  };\n\n  if (!onConfirm) {\n    return React__default.createElement(Form, {\n      onSubmit: handleSubmit(onSubmit)\n    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordHeader), React__default.createElement(SecondaryText$1, null, dictionary.forgotPasswordSecondaryHeader), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(EmailInput, {\n      register: () => register(\"email\"),\n      label: dictionary.newEmailLabel,\n      disabled: isSubmitting\n    }), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(SubmitButton, {\n      disabled: isSubmitting\n    }, dictionary.forgotPasswordSubmitButton), React__default.createElement(SecondaryButton, {\n      onClick: _ => setCurrentPage(\"SignIn\"),\n      disabled: isSubmitting\n    }, dictionary.backToSignIn));\n  } else {\n    var _errors$code, _errors$newPassword;\n\n    return React__default.createElement(Form, {\n      onSubmit: handleSubmit(onConfirmSubmit)\n    }, React__default.createElement(HeaderText, null, dictionary.forgotPasswordConfirmHeader), React__default.createElement(Spacer, {\n      size: \"medium\"\n    }), React__default.createElement(Input, {\n      register: () => register(\"code\", codeReqs),\n      label: dictionary.codeLabel,\n      disabled: isSubmitting\n    }), React__default.createElement(ErrorText, {\n      value: (_errors$code = errors.code) == null ? void 0 : _errors$code.message\n    }), React__default.createElement(Spacer, {\n      size: \"xlarge\"\n    }), React__default.createElement(PasswordInput, {\n      register: () => register(\"newPassword\", passwordReqs),\n      label: dictionary.forgotPasswordConfirmLabel,\n      autoComplete: \"new-password\",\n      disabled: isSubmitting\n    }), React__default.createElement(ErrorText, {\n      value: (_errors$newPassword = errors.newPassword) == null ? void 0 : _errors$newPassword.message\n    }), React__default.createElement(Spacer, {\n      size: \"xlarge\"\n    }), React__default.createElement(SubmitButton, {\n      disabled: isSubmitting\n    }, dictionary.forgotPasswordConfirmSubmitButton));\n  }\n}\n\nexport default ForgotPassword;","map":{"version":3,"sources":["../src/ui/Auth/components/SecondaryText.tsx","../src/ui/Auth/pages/ForgotPassword.tsx"],"names":["SecondaryText","styled","props","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","whiteSpace","React","emailTemplate","useState","formState","isSubmitting","useForm","forgotPasswordConfirm","useEasybase","onSubmit","formData","forgotRes","forgotPassword","setForgottenUsername","setOnConfirm","toast","dictionary","reset","onConfirmSubmit","forgotConfirmRes","setCurrentPage","passwordReqs","minLength","value","message","maxLength","pattern","codeReqs","handleSubmit","size","register","label","newEmailLabel","disabled","onClick","_","codeLabel","errors","forgotPasswordConfirmLabel","autoComplete"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst SecondaryText = styled.h2(props => ({\n    fontFamily: \"inherit\",\n    fontSize: 15,\n    fontWeight: 300,\n    letterSpacing: -.2,\n    lineHeight: '20px',\n    whiteSpace: 'normal',\n    ...(props.theme.secondaryText ? { ...props.theme.secondaryText } : {})\n}))\n\nexport default function (props: React.HTMLAttributes<HTMLHeadingElement>) {\n    return (\n        <SecondaryText {...props} />\n    )\n}\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport HeaderText from '../components/HeaderText';\nimport SecondaryText from '../components/SecondaryText';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport { IPage } from '../../uiTypes';\nimport toast from 'react-hot-toast';\nimport ErrorText from '../components/ErrorText';\nimport Input from '../components/internal/Input';\nimport PasswordInput from '../components/PasswordInput';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary, emailTemplate }: IPage) {\n    const [onConfirm, setOnConfirm] = useState<boolean>(false);\n    const [forgottenUsername, setForgottenUsername] = useState<string | undefined>();\n    const { register, handleSubmit, reset, formState: { errors, isSubmitting } } = useForm();\n    const { forgotPassword, forgotPasswordConfirm } = useEasybase();\n\n    const onSubmit = async (formData: Record<string, string>) => {\n        if (!formData.email) {\n            return;\n        }\n\n        const forgotRes = await forgotPassword(formData.email, emailTemplate);\n        if (forgotRes.success) {\n            setForgottenUsername(formData.email);\n            setOnConfirm(true);\n            toast.success('Check your email for a verification code')\n        } else {\n            if (forgotRes.errorCode === \"RequestLimitExceeded\") {\n                toast.error(dictionary.errorRequestLimitExceeded!);\n            } else if (forgotRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else {\n                reset();\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const onConfirmSubmit = async (formData: Record<string, string>) => {\n        if (!formData.code || !formData.newPassword || !forgottenUsername) {\n            return;\n        }\n        const forgotConfirmRes = await forgotPasswordConfirm(formData.code, forgottenUsername, formData.newPassword)\n        if (forgotConfirmRes.success) {\n            setOnConfirm(false);\n            setForgottenUsername(\"\");\n            setCurrentPage('SignIn');\n            toast.success('Password successfully changed')\n        } else {\n            if (forgotConfirmRes.errorCode === \"BadPasswordLength\") {\n                toast.error(dictionary.errorPasswordTooShort!);\n            } else if (forgotConfirmRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!);\n            } else if (forgotConfirmRes.errorCode === \"NoUserExists\") {\n                reset();\n                toast.error(dictionary.errorNoAccountFound!);\n            } else if (forgotConfirmRes.errorCode === \"WrongVerificationCode\") {\n                toast.error(dictionary.errorWrongVerificationCode!);\n            } else {\n                toast.error('Bad request');\n            }\n        }\n    }\n\n    const passwordReqs = {\n        minLength: {\n            value: 8,\n            message: \"Password must be at least 8 characters long\"\n        },\n        maxLength: {\n            value: 100,\n            message: \"Password too long\"\n        },\n        pattern: {\n            value: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{7,}$/gm,\n            message: \"Must contain a digit and uppercase and lowercase letters\"\n        }\n    }\n\n    const codeReqs = {\n        minLength: {\n            value: 8,\n            message: \"Incorrect code length\"\n        }\n    }\n\n    if (!onConfirm) {\n        return (\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordHeader}</HeaderText>\n                <SecondaryText>{dictionary.forgotPasswordSecondaryHeader}</SecondaryText>\n                <Spacer size=\"medium\" />\n                <EmailInput\n                    register={() => register(\"email\")}\n                    label={dictionary.newEmailLabel}\n                    disabled={isSubmitting}\n                />\n                <Spacer size=\"medium\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordSubmitButton}</SubmitButton>\n                <SecondaryButton onClick={_ => setCurrentPage(\"SignIn\")} disabled={isSubmitting}>{dictionary.backToSignIn}</SecondaryButton>\n            </Form>\n        )\n    } else {\n        return (\n            <Form onSubmit={handleSubmit(onConfirmSubmit)}>\n                <HeaderText>{dictionary.forgotPasswordConfirmHeader}</HeaderText>\n                <Spacer size=\"medium\" />\n                <Input\n                    register={() => register(\"code\", codeReqs)}\n                    label={dictionary.codeLabel!}\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.code?.message} />\n                <Spacer size=\"xlarge\" />\n                <PasswordInput\n                    register={() => register(\"newPassword\", passwordReqs)}\n                    label={dictionary.forgotPasswordConfirmLabel}\n                    autoComplete=\"new-password\"\n                    disabled={isSubmitting}\n                />\n                <ErrorText value={errors.newPassword?.message} />\n                <Spacer size=\"xlarge\" />\n                <SubmitButton disabled={isSubmitting}>{dictionary.forgotPasswordConfirmSubmitButton}</SubmitButton>\n            </Form>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}