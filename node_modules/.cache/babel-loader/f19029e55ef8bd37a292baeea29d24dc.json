{"ast":null,"code":"import React__default from 'react';\nimport { T as TextButton, u as useForm, F as Form, H as HeaderText, S as Spacer, E as EmailInput, P as PasswordInput, a as SubmitButton, b as SecondaryButton } from './index.esm-587f4988.js';\nimport { _ as _extends, u as useEasybase } from './index-9b07a9d3.js';\nimport { q as qe, t as toast } from './Auth-016a6bca.js';\nconst ForgotPassword = qe(TextButton)(props => _extends({\n  marginTop: -53,\n  marginBottom: 53,\n  display: 'flex'\n}, props.theme.forgotPassword ? _extends({}, props.theme.forgotPassword) : {}));\n\nfunction ForgotPassword$1(props) {\n  return React__default.createElement(ForgotPassword, Object.assign({}, props, {\n    type: \"button\"\n  }));\n}\n\nfunction SignIn({\n  setCurrentPage,\n  dictionary\n}) {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  const {\n    signIn\n  } = useEasybase();\n\n  const onSubmit = async formData => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const signInRes = await signIn(formData.email, formData.password);\n\n    if (!signInRes.success) {\n      if (signInRes.errorCode === \"NoUserExists\") {\n        toast.error(dictionary.errorUserDoesNotExist);\n      } else if (signInRes.errorCode === \"BadFormat\") {\n        reset();\n        toast.error(dictionary.errorBadInputFormat);\n      }\n    } // Will automatically change views\n\n  };\n\n  return React__default.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit)\n  }, React__default.createElement(HeaderText, null, dictionary.signInHeader), React__default.createElement(Spacer, {\n    size: \"medium\"\n  }), React__default.createElement(EmailInput, {\n    register: () => register(\"email\"),\n    label: dictionary.emailLabel,\n    disabled: isSubmitting\n  }), React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(PasswordInput, {\n    register: () => register(\"password\"),\n    autoComplete: \"current-password\",\n    disabled: isSubmitting,\n    label: dictionary.passwordLabel\n  }), React__default.createElement(Spacer, {\n    size: \"xlarge\"\n  }), React__default.createElement(ForgotPassword$1, {\n    onClick: _ => setCurrentPage(\"ForgotPassword\"),\n    disabled: isSubmitting\n  }, dictionary.forgotPasswordButton), React__default.createElement(SubmitButton, {\n    disabled: isSubmitting\n  }, dictionary.signInSubmitButton), React__default.createElement(SecondaryButton, {\n    onClick: _ => setCurrentPage(\"SignUp\"),\n    disabled: isSubmitting\n  }, dictionary.noAccountButton));\n}\n\nexport default SignIn;","map":{"version":3,"sources":["../src/ui/Auth/components/ForgotPassword.tsx","../src/ui/Auth/pages/SignIn.tsx"],"names":["ForgotPassword","styled","props","marginTop","marginBottom","display","type","dictionary","formState","isSubmitting","useForm","signIn","useEasybase","onSubmit","resolve","setTimeout","signInRes","formData","toast","reset","handleSubmit","React","size","register","label","emailLabel","disabled","autoComplete","passwordLabel","onClick","_","setCurrentPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextButton from './internal/TextButton';\nimport styled from 'styled-components';\n\nconst ForgotPassword = styled(TextButton)(props => ({\n    marginTop: -53,\n    marginBottom: 53,\n    display: 'flex',\n    ...(props.theme.forgotPassword ? { ...props.theme.forgotPassword } : {})\n}))\n\nexport default function (props: React.ButtonHTMLAttributes<HTMLButtonElement>) {\n    return (\n        <ForgotPassword {...props} type=\"button\" />\n    )\n}\n","import React from 'react';\nimport Form from '../components/Form';\nimport EmailInput from '../components/EmailInput';\nimport PasswordInput from '../components/PasswordInput';\nimport HeaderText from '../components/HeaderText';\nimport ForgotPassword from '../components/ForgotPassword';\nimport SecondaryButton from '../components/SecondaryButton';\nimport SubmitButton from '../components/SubmitButton';\nimport Spacer from '../components/Spacer';\nimport { useForm } from 'react-hook-form';\nimport toast from 'react-hot-toast';\nimport { IPage } from '../../uiTypes';\nimport useEasybase from '../../../useEasybase';\n\nexport default function ({ setCurrentPage, dictionary }: IPage) {\n    const { register, handleSubmit, reset, formState: { isSubmitting } } = useForm();\n    const { signIn } = useEasybase();\n    const onSubmit = async (formData: Record<string, string>) => {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const signInRes = await signIn(formData.email, formData.password);\n        if (!signInRes.success) {\n            if (signInRes.errorCode === \"NoUserExists\") {\n                toast.error(dictionary.errorUserDoesNotExist!)\n            } else if (signInRes.errorCode === \"BadFormat\") {\n                reset();\n                toast.error(dictionary.errorBadInputFormat!)\n            }\n        }\n        // Will automatically change views\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <HeaderText>{dictionary.signInHeader}</HeaderText>\n            <Spacer size=\"medium\" />\n            <EmailInput\n                register={() => register(\"email\")}\n                label={dictionary.emailLabel}\n                disabled={isSubmitting}\n            />\n            <Spacer size=\"xlarge\" />\n            <PasswordInput\n                register={() => register(\"password\")}\n                autoComplete=\"current-password\"\n                disabled={isSubmitting}\n                label={dictionary.passwordLabel}\n            />\n            <Spacer size=\"xlarge\" />\n            <ForgotPassword onClick={_ => setCurrentPage(\"ForgotPassword\")} disabled={isSubmitting}>{dictionary.forgotPasswordButton}</ForgotPassword>\n            <SubmitButton disabled={isSubmitting}>{dictionary.signInSubmitButton}</SubmitButton>\n            <SecondaryButton onClick={_ => setCurrentPage(\"SignUp\")} disabled={isSubmitting}>{dictionary.noAccountButton}</SecondaryButton>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}